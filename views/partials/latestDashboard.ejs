<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">
</head>

<body>
    <div class="popupFav" id="popupFav">
        <h1></h1>
    </div>
    <div class="container" id="cryptoContainer">
        <div class="crypto" id="cryptoCard">
            <div class="cryptoMenu">
                <div></div>
                <p class="cryptoMenuItem">Rank</p>
                <i></i>
                <p class="cryptoMenuItem">Name</p>
                <p class="cryptoMenuItem" id="nameCrypto">Market Cap</p>
                <p class="cryptoMenuItem" id="price">Price</p>
                <p class="cryptoMenuItem">1h%</p>
                <p class="cryptoMenuItem">24h%</p>
                <p class="cryptoMenuItem">7d%</p>
            </div>
            <div id="cryptoDataContainer">
                <div id="cryptoData" class="cryptoData"></div>
            </div>
        </div>
    </div>

</body>

</html>
<script>
    const cryptoDataContainer = document.getElementById("cryptoDataContainer")
    const cryptoData = document.getElementById("cryptoData")

    const createResult = async (name, price, marketCap, symbol, rank, iconUrl) => {
        const favBtn = document.createElement('i')
        favBtn.className = "fa-solid fa-star"
        favBtn.addEventListener("click", () => toggleFav(name));

        const cryptoRank = document.createElement('p')
        cryptoRank.className = "cryptoRank"
        cryptoRank.textContent = rank

        const cryptoIcon = document.createElement('img')
        cryptoIcon.className = "cryptoImg"
        cryptoIcon.src = iconUrl

        const cryptoName = document.createElement('p')
        cryptoName.className = "cryptoName"
        cryptoName.textContent = name

        const symbolSpan = document.createElement('span')
        symbolSpan.className = "symbol"
        symbolSpan.textContent = symbol

        const cryptoMarketCap = document.createElement('p')
        cryptoMarketCap.className = "cryptoMarketCap"
        cryptoMarketCap.textContent = marketCap

        const cryptoPrice = document.createElement('p')
        cryptoPrice.className = "cryptoPrice"
        cryptoPrice.textContent = price

        cryptoName.appendChild(symbolSpan)
        cryptoData.appendChild(favBtn)
        cryptoData.appendChild(cryptoRank)
        cryptoData.appendChild(cryptoIcon)
        cryptoData.appendChild(cryptoName)
        cryptoData.appendChild(cryptoMarketCap)
        cryptoData.appendChild(cryptoPrice)
        cryptoDataContainer.appendChild(cryptoData)
    }

    const createTrend = async (trend1h, trendDay, trendWeek) => {
        const oneH = document.createElement('p')//TODO: UGLY CODE MAKE BETTER TF
        oneH.className = "oneHour"
        oneH.textContent = trend1h
        if(trend1h < 0){
            oneH.style.color = "red"
        } else{
            oneH.style.color = "green"
        }
        const oneDay = document.createElement('p')
        oneDay.className = "day"
        oneDay.textContent = trendDay
        if(trendDay < 0){
            oneDay.style.color = "red"
        } else{
            oneDay.style.color = "green"
        }
        const oneWeek = document.createElement('p')
        oneWeek.className = "week"
        oneWeek.textContent = trendWeek
        if(trendWeek < 0){
            oneWeek.style.color = "red"
        } else{
            oneWeek.style.color = "green"
        }
        cryptoData.appendChild(oneH)
        cryptoData.appendChild(oneDay)
        cryptoData.appendChild(oneWeek)
        cryptoDataContainer.appendChild(cryptoData)
    }

    const toggleFav = async (name) => {//TODO:CREATE POP UP THAT SAYS ADDED OR REMOVED
        console.log(name)
        const popupFav = document.getElementById("popupFav")
        try {
            const res = await fetch('/crypto/favorite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ currency: name }),
            })
            const result = await res.json();
            console.log()
            if (result.message === "Currency removed from favorites") {
                popupFav.style.display = "block"
                popupFav.textContent = "Currency removed from favorites ❌"
                setTimeout(() => {
                    popupFav.style.display = "none"
                }, 2000);
            } else if (result.message === "Currency added to favorites") {
                popupFav.style.display = "block"
                popupFav.classList.add('show');
                popupFav.textContent = "Currency added to favorites ✅"
                setTimeout(() => {
                    popupFav.style.display = "none"
                }, 2000);
            }
        } catch (error) {
            console.log(error)
        }
    }
    

    const getLatest = async () => {
        try {
            const response = await fetch('/crypto/latest', {
                method: 'GET'
            })
            const data = await response.json()
            // console.log(data)
            // const names = []
            data.coins.forEach((element) => {
                const name = element.name
                const price = element.price
                const marketCap = element.marketCap
                const rank = element.rank
                const iconUrl = element.iconUrl
                const trend1h = element.trend1h
                const trendDay = element.trend24h//TODO: just pass from backend
                const trendWeek = element.trend7d//TODO: just pass from backend
                const trendYear = element.trend1y//TODO: just pass from backend 
                const symbol = element.symbol
                const formattedCurrency = formatCurrency(price)
                const marketCapFormat = formatMarketCap(marketCap)
                createResult(name, formattedCurrency, marketCapFormat, symbol, rank, iconUrl)
                createTrend(trend1h, trendDay, trendWeek, trendYear)
            });
        } catch (err) {
            console.log(err)
        }
    }
    const getFavorites = async () => {
        try {
            const response = await fetch('/crypto/getFavorite', {
                method: 'GET'
            })
            const data = await response.json()

            data.user.forEach((coins, index) => {
                coins.forEach((coin) => {
                    const name = coin.name
                    const price = coin.price
                    const marketCap = coin.marketCap
                    const rank = coin.rank
                    const iconUrl = coin.iconUrl
                    const trend1h = coin.trend1h
                    const trendDay = coin.trend24h//TODO: just pass from backend
                    const trendWeek = coin.trend7d//TODO: just pass from backend
                    const trendYear = coin.trend1y//TODO: just pass from backend 
                    const symbol = coin.symbol
                    const formattedCurrency = formatCurrency(price)
                    const marketCapFormat = formatMarketCap(marketCap)

                    createResult(name, formattedCurrency, marketCapFormat, symbol, rank, iconUrl)
                    createTrend(trend1h, trendDay, trendWeek, trendYear)
                });
            });
        } catch (error) {
            console.log(error)
        }
    }
    const reset = () => {
        cryptoData.textContent = ""
    }
    window.onload = () => {
        getLatest()
    };    //getLatest()
    //getFavorites()
</script>